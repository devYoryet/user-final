server:
  port: ${SERVER_PORT:8081}

spring:
  application:
    name: ${SPRING_APPLICATION_NAME:user}
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:oracle:thin:@localhost:1521:xe}
    username: ${SPRING_DATASOURCE_USERNAME:dev_user}
    password: ${SPRING_DATASOURCE_PASSWORD:dev_pass}
    driver-class-name: oracle.jdbc.OracleDriver
    hikari:
      maximum-pool-size: ${HIKARI_MAXIMUM_POOL_SIZE:5}
      minimum-idle: ${HIKARI_MINIMUM_IDLE:1}
      connection-timeout: ${HIKARI_CONNECTION_TIMEOUT:60000}
      idle-timeout: ${HIKARI_IDLE_TIMEOUT:300000}
      max-lifetime: ${HIKARI_MAX_LIFETIME:900000}
      leak-detection-threshold: ${HIKARI_LEAK_DETECTION_THRESHOLD:60000}

  jpa:
    database-platform: org.hibernate.dialect.OracleDialect
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
    show-sql: ${SPRING_JPA_SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.OracleDialect
        jdbc:
          time_zone: UTC
          batch_size: 10
   

  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:user}
    password: ${RABBITMQ_PASSWORD:user_pass}
    virtual-host: ${RABBITMQ_VIRTUAL_HOST:salon-booking}

  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:default_email@gmail.com}
    password: ${MAIL_PASSWORD:default_password}

    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

aws:
  cognito:
    user-pool-id: ${AWS_COGNITO_USER_POOL_ID:us-east-1_BM2KEBPZM}
    client-id: ${AWS_COGNITO_CLIENT_ID:53h6m5krqkq8phqtf63ed0otu5}
    region: ${AWS_REGION:us-east-1}
    jwks-uri: ${AWS_COGNITO_JWKS_URI:https://cognito-idp.us-east-1.amazonaws.com/us-east-1_BM2KEBPZM/.well-known/jwks.json}

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: read-only
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
    hostname: ${EUREKA_INSTANCE_HOSTNAME:user}
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8070/eureka/}

info:
  app:
    name: "USER"
    description: "USER API For Salon Booking System"
    version: "1.0.0"